#!/usr/bin/env bash
set -e

LOG_FILE="/var/log/defguard.log"

log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') $1"
}

LOG_FILE="/var/log/defguard.log"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1"
}

base64url_encode() {
  echo -n "$1" | openssl base64 -e -A | tr '+/' '-_' | tr -d '='
}

(
log "Updating apt repositories..."
apt update

log "Installing curl..."
apt install -y curl

log "Downloading defguard-gateway package..."
curl -fsSL -o /tmp/defguard-gateway.deb https://github.com/DefGuard/gateway/releases/download/v${package_version}/defguard-gateway_${package_version}_${arch}-unknown-linux-gnu.deb

log "Installing defguard-gateway package..."
dpkg -i /tmp/defguard-gateway.deb

log "Generating gateway token..."
NETWORK_ID="${network_id}"
SECRET="${gateway_secret}"
ISSUER="DefGuard"

HEADER='{"alg":"HS256","typ":"JWT"}'
NOW=$(date +%s)
EXPIRATION=$(($NOW + 315360000))
PAYLOAD=$(cat <<EOF
{
"iss": "$${ISSUER}",
  "sub": "DEFGUARD-NETWORK-$${NETWORK_ID}",
  "client_id": "$${NETWORK_ID}",
  "exp": $${EXPIRATION},
"nbf": $${NOW}
}
EOF
)
HEADER_B64=$(base64url_encode "$HEADER")
PAYLOAD_B64=$(base64url_encode "$PAYLOAD")
SIGNING_INPUT="$${HEADER_B64}.$${PAYLOAD_B64}"
SIGNATURE=$(echo -n "$SIGNING_INPUT" | openssl dgst -sha256 -hmac "$SECRET" -binary | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')

GATEWAY_TOKEN="$${SIGNING_INPUT}.$${SIGNATURE}"

log "Writing gateway configuration to /etc/defguard/gateway.toml..."
tee /etc/defguard/gateway.toml <<EOF
# This is an example config file for Defguard VPN gateway
# To use it fill in actual values for your deployment below

# Required: secret token generated by defguard
# NOTE: must replace default with actual value
token = "$${GATEWAY_TOKEN}"
# Required: Defguard server gRPC endpoint URL
# NOTE: must replace default with actual value
grpc_url = "http://${core_address}:${core_grpc_port}"
# Optional: gateway name which will be displayed in Defguard web UI
name = "${gateway_name}"
# Required: use userspace WireGuard implementation (e.g. wireguard-go)
userspace = false
# Optional: path to TLS cert file
# grpc_ca = cert.pem
# Required: how often should interface stat updates be sent to Defguard server (in seconds)
stats_period = 60
# Required: name of WireGuard interface
ifname = "wg0"
# Optional: write PID to this file
# pidfile = defguard-gateway.pid
# Required: enable logging to syslog
use_syslog = false
# Required: which syslog facility to use
syslog_facility = "LOG_USER"
# Required: which socket to use for logging
syslog_socket = "/var/run/log"

# Optional: Command which will be run before bringing interface up
# Example: Allow all traffic through WireGuard interface:
#pre_up = "/path/to/iptables -A INPUT -i wg0 -j ACCEPT
# example with multiple commands - add them to a shell script
#pre_up = "/path/to/shell /path/to/script"

# Optional: Command which will be run after bringing interface up
# Example: Add a default route after WireGuard interface is up:
#post_up = "/path/to/ip route add default via 192.168.1.1 dev wg0"

# Optional: Command which will be run before bringing interface down
# Example: Remove WireGuard-related firewall rules before interface is taken down:
#pre_down = "/path/to/iptables -D INPUT -i wg0 -j ACCEPT"

# Optional: Command which will be run after bringing interface down
# Example: Remove the default route after WireGuard interface is down:
#post_down = "/pat/to/ip route del default via 192.168.1.1 dev wg0"

# A HTTP port that will expose the REST HTTP gateway health status
# STATUS CODES:
# 200 - Gateway is working and is connected to CORE
# 503 - gateway works but is not connected to CORE
#health_port = 55003

# Optional: Enable automatic masquerading of traffic by the firewall
masquerade = ${nat}

# Optional: Set the priority of the Defguard forward chain
#fw_priority = 0
EOF

%{ if nat ~}
  log "Enabling IP forwarding for NAT (IPv4)..."
  sysctl -w net.ipv4.ip_forward=1
  grep -q -e '^net.ipv4.ip_forward' /etc/sysctl.conf || echo "net.ipv4.ip_forward = 1" | tee -a /etc/sysctl.conf

  log "Enabling IP forwarding for NAT (IPv6)..."
  sysctl -w net.ipv6.conf.all.forwarding=1
  grep -q -e '^net.ipv6.conf.all.forwarding' /etc/sysctl.conf || echo "net.ipv6.conf.all.forwarding = 1" | tee -a /etc/sysctl.conf
%{ endif ~}

log "Setting log level in defguard-gateway service..."
if grep -q '^Environment="RUST_LOG=' /lib/systemd/system/defguard-gateway.service; then
  sed -i "s|^Environment=\"RUST_LOG=.*\"|Environment=\"RUST_LOG=${log_level}\"|" /lib/systemd/system/defguard-gateway.service
else
  sed -i "/^\[Service\]/a Environment=\"RUST_LOG=${log_level}\"" /lib/systemd/system/defguard-gateway.service
fi
log "Reloading systemd daemon to apply changes..."
systemctl daemon-reload

log "Enabling defguard-gateway service..."
systemctl enable defguard-gateway

log "Starting defguard-gateway service..."
systemctl start defguard-gateway

log "Cleaning up after installing Defguard Gateway..."
rm -f /tmp/defguard-gateway.deb

log "Setup completed."
) 2>&1 | tee -a "$LOG_FILE"
